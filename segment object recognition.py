# -*- coding: utf-8 -*-
"""Breast Cancer Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zZ8cpQ-35ICe9HMc70wgiSu2a9ht1qTs

IMPORT ALL LIBRARIES AND MOUNT GOOGLE DRIVE
"""

!pip install wget

# import all libraries
import os
import wget
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16
from tensorflow.keras import layers, models, Input
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display
import numpy as np
from tensorflow.keras.models import load_model
from PIL import Image

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

"""LOAD DATASET"""

# Define paths
base_dir = '/content/drive/My Drive/Dataset_BUSI_with_GT'  # Update with your dataset path
unknown_folder = os.path.join(base_dir, 'unknown')

"""POPULATE UNKNOWN FOLDER WITH RANDOM IMAGES"""

## populate unknown folder with random images

# Define how many random images you want to download
num_images = 300  # Set this to the number of random images you need

# Download random images from Lorem Picsum
for i in range(num_images):
    image_url = f"https://picsum.photos/200/300?random={i}"  # 200x300 random image
    image_path = os.path.join(unknown_folder, f'random_image_{i}.jpg')
    wget.download(image_url, image_path)

print(f'{num_images} random images downloaded into the unknown folder.')

"""PRE-PROCESS DATA"""

# Define Image Dimensions
IMG_HEIGHT = 224
IMG_WIDTH = 224
BATCH_SIZE = 32


# Create an ImageDataGenerator with a 20% validation split (define preprocessing strategy)
datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2
)


# Load and preprocess data

# Training generator
train_generator = datagen.flow_from_directory(
    base_dir,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training'
)

# Validation generator
validation_generator = datagen.flow_from_directory(
    base_dir,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation'
)

"""BUILD TRANSFER LEARNING MODEL USING VGG16 PRE-TRAINED LAYERS"""

# Define the input shape
input_shape = (224, 224, 3)
inputs = Input(shape=input_shape)

# Load the VGG16 model without the top layers
base_model = VGG16(weights='imagenet', include_top=False, input_tensor=inputs)

# Freeze the base model layers (so they don't get trained)
base_model.trainable = False

# Add custom layers
x = base_model.output
x = layers.GlobalAveragePooling2D()(x)
x = layers.Dense(256, activation='relu')(x)
x = layers.Dropout(0.5)(x)
outputs = layers.Dense(4, activation='softmax')(x)  # 4 output classes

# Create the model
model = models.Model(inputs=inputs, outputs=outputs)

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Print the model summary
model.summary()

"""  TRAIN THE MODEL"""

history = model.fit(
    train_generator,
    epochs=20,
    validation_data=validation_generator
)

"""SAVE TRAINED MODEL"""

# Save the model after training
model.save('/content/drive/My Drive/breast_cancer_classifier_corrected.h5')

"""PLOT TRAINING VS VALIDATION"""

# Plot training results
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(20)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

"""CREATE GUI FOR TESTING MODEL"""

# Load the model for prediction
model = load_model('/content/drive/MyDrive/breast_cancer_classifier_corrected.h5')

# Function for prediction
def classify_image(image_path):

    img = Image.open(image_path).resize((224, 224))
    img_array = np.expand_dims(np.array(img) / 255.0, axis=0)
    prediction = model.predict(img_array)
    classes = ['benign', 'malignant', 'normal', 'unknown']
    return classes[np.argmax(prediction)]

# Create widgets
file_upload = widgets.FileUpload(accept='image/*', multiple=False)
output_label = widgets.Label(value="Upload an image for classification")
classify_button = widgets.Button(description="Classify Image")

# Button click event
def on_classify_button_click(b):
    for filename, file_info in file_upload.value.items():
        with open(filename, 'wb') as f:
            f.write(file_info['content'])
        result = classify_image(filename)
        output_label.value = f"Prediction: {result}"

classify_button.on_click(on_classify_button_click)

# Display widgets
display(file_upload, classify_button, output_label)